// Code generated by go-bindata.
// sources:
// postgres/001_base_sql.sql
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres001_base_sqlSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x95\x41\xb3\x9a\x30\x10\xc7\xcf\x8f\x4f\xb1\x47\x9d\xf6\xf5\x0b\xbc\x53\x84\xd5\x97\x29\x06\x0b\x61\xaa\xbd\x38\x54\xa2\x66\x9e\x82\xc5\x38\xb6\xdf\xbe\x21\x01\xca\x48\x74\x5e\xa7\x87\x72\x92\xe4\xbf\x9b\xdd\xff\xfe\x88\xcf\xcf\xf0\xe1\x28\x77\x55\xa6\x04\xa4\x27\xcf\x8f\x91\x70\x84\xc4\x7f\xc5\x39\x01\x3a\x05\x16\x71\xc0\x25\x4d\x78\x02\x7b\x51\x9d\xcf\x7b\x71\x78\xf1\x5a\x19\x27\x93\x10\xef\xa8\x3e\x6d\x74\xca\x5d\x59\xfd\x82\x91\xf7\x24\x73\x48\xe6\x24\x0c\x13\x8c\x29\x09\x3f\x7a\x4f\x45\x76\x14\xc0\x71\xc9\x4d\x28\x4b\x43\xbd\x08\xfa\xf1\x23\x96\xf0\x98\x50\xc6\xe1\xf4\xb6\xee\x52\x2c\x62\x3a\x27\xf1\x0a\x3e\xe3\x0a\x46\x32\x1f\xeb\x0c\x3d\xe5\xe5\x47\xa7\x5c\x9b\xc4\x29\xa3\x5f\x52\x84\x51\xfd\x32\xf6\xc6\x7f\x0a\xa6\x2c\xc0\x25\xc8\xfc\xe7\x4d\x40\xc4\x5c\x75\x9b\xf0\x77\x76\xbb\x15\x22\x6f\x3b\x6d\x9b\xdc\x54\x42\xe7\xca\xd7\x99\x02\x4e\xe7\x98\x70\x32\x5f\xc0\x57\xca\x5f\xcd\x2b\x7c\x8b\x18\x76\xed\x43\x80\x53\x92\x86\x1c\x8a\xf2\x3a\x1a\x5b\x33\x2e\xa7\xfc\xdf\xe2\xab\x83\xcb\xe3\x7b\xde\x5f\xc5\xf7\xb3\x54\x76\xcb\xae\xe4\xe2\xbc\xa9\xe4\x49\xc9\xb2\xe8\xad\xca\x63\xb6\xeb\xab\x3a\x2b\xdb\x29\xd7\x33\x69\xcb\xb9\x37\x5a\xe3\xd7\xe3\xb1\x6e\xad\xaa\x1b\x95\xc9\x52\x3f\xd3\x28\x46\x3a\x63\x36\xac\x77\xfa\x18\x62\x9c\x62\x8c\xcc\x47\x27\x87\x5a\xd1\xe5\xd0\x13\x0f\x30\xc4\x9a\x75\x6c\x1c\xd4\x4b\xe9\x22\xa8\x27\xed\x93\xc4\x27\x01\x0e\xea\xd6\xa0\x99\x8a\x6a\x63\x5b\xc6\xf4\xef\x3b\x88\x19\xe9\x00\x2f\x0b\xca\xdf\xa0\xa5\x67\x72\xd4\x68\x19\xeb\x73\x98\xd0\x59\x0b\x98\x31\xff\x3f\x33\xa6\xa4\x3a\x38\x69\xca\x2e\x6a\x5f\x56\x7d\x4c\xca\x42\x89\x42\xc1\x64\xc5\x91\xd8\xa5\x83\x2c\xde\x5c\xb1\xba\x27\xdd\x68\x14\x85\x48\xd8\xf0\xf4\x29\xd1\xf7\x88\x15\x9e\x55\x56\x55\xe2\x7d\x5a\x33\x0e\x6d\xa0\x1e\x24\xce\x30\x7e\x78\xf1\x18\xcb\x87\x74\xde\x08\xb7\x56\x68\x59\x76\xd3\xd9\x1c\xea\x26\xd3\xa2\xe0\xa6\xb2\x41\x70\x08\xa5\x9b\x35\x53\x87\xb1\xad\xcf\x9a\x25\xa7\x5e\xd6\x41\xee\x98\xd6\xc1\x61\x58\xb3\x53\x1f\xd7\xff\x93\x08\xca\x6b\xe1\x05\x71\xb4\xb8\x77\x99\xbe\xdc\xee\x76\xdf\xc1\x60\xa7\xab\xda\xbd\xd3\x54\xa0\x0b\x30\xbb\xf6\x23\x19\x7e\xd7\x8d\x31\x2f\x4e\x95\xf1\xf8\xa1\xc2\x74\xdb\x2a\x7e\x07\x00\x00\xff\xff\x30\x7e\xbd\xe2\x0f\x07\x00\x00")

func postgres001_base_sqlSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres001_base_sqlSql,
		"postgres/001_base_sql.sql",
	)
}

func postgres001_base_sqlSql() (*asset, error) {
	bytes, err := postgres001_base_sqlSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/001_base_sql.sql", size: 1807, mode: os.FileMode(420), modTime: time.Unix(1460862774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/001_base_sql.sql": postgres001_base_sqlSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"001_base_sql.sql": &bintree{postgres001_base_sqlSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

